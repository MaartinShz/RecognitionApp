import streamlit as st
import cv2 as cv
import face_recognition
import pickle
import os
import numpy as np
from keras.models import load_model
from keras.preprocessing.image import img_to_array
from tensorflow import keras


path = os.getcwd()
encoded_dir = str(path) + "/dossier_encoded/"
model_dir = str(path) + "/models/"

# Charger les listes depuis le fichier pickle
with open(str(encoded_dir)+'known_faces.pkl', 'rb') as f:
    known_face_encodings, known_face_names = pickle.load(f)


#Model emotion
model = keras.models.load_model(model_dir+'Emotion_Detection.h5')


class_labels = ['Angry','Happy','Neutral','Sad','Surprise']
#__________


MODEL_MEAN_VALUES = (78.4263377603, 87.7689143744, 114.895847746)
AGE_INTERVALS = ['(0, 2)', '(4, 6)','(25, 32)', '(8, 12)', '(15, 20)',
                  '(38, 43)', '(48, 53)', '(60, 100)']

genderList = ['Male', 'Female']

#Model age
AGE_PROTO = 'age_deploy.prototxt'
AGE_MODEL = 'age_net.caffemodel'
age_net = cv.dnn.readNetFromCaffe(model_dir+AGE_PROTO,model_dir+AGE_MODEL)
#__________

#Model gender
GENDER_PROTO = 'gender_deploy.prototxt'
GENDER_MODEL = 'gender_net.caffemodel'
gender_net = cv.dnn.readNetFromCaffe(model_dir+GENDER_PROTO, model_dir+GENDER_MODEL)
#__________


# Définir les émotions à prédire
emotions = ['angry', 'disgust', 'fear', 'happy', 'sad', 'surprise', 'neutral']

def detect_faces(frame, known_face_encodings, known_face_names):
    # Convert the image from BGR color (which OpenCV uses) to RGB color (which face_recognition uses)
    rgb_frame = frame[:, :, ::-1]

    
    frame_small = cv.resize(frame, (48, 48))
    # Convertir l'image en niveaux de gris
    gray_image = cv.cvtColor(frame_small, cv.COLOR_BGR2GRAY)
    # Normaliser les pixels de l'image pour avoir des valeurs entre 0 et 1
    normalized_image = gray_image / 255.0
    # Ajouter une dimension supplémentaire pour représenter l'ensemble des images (1, 48, 48, 1)
    input_image = np.expand_dims(normalized_image, axis=0)
    input_image = np.expand_dims(input_image, axis=3)
    predictions = model.predict(input_image)

    # Récupérer les scores de prédiction pour chaque émotion (0=angry, 1=disgust, 2=fear, 3=happy, 4=sad, 5=surprise, 6=neutral)
    angry_score, disgust_score, fear_score, happy_score, sad_score, surprise_score, neutral_score = predictions[0]

    # Placer les scores de prédiction dans un dictionnaire
    # Récupérer les scores de prédiction pour chaque émotion (0=angry, 1=disgust, 2=fear, 3=happy, 4=sad, 5=surprise, 6=neutral)
    angry_score, disgust_score, fear_score, happy_score, sad_score, surprise_score, neutral_score = predictions[0]

    emotion_scores = {'angry': angry_score, 'disgust': disgust_score, 'fear': fear_score, 'happy': happy_score, 'sad': sad_score, 'surprise': surprise_score, 'neutral': neutral_score}

    # Trier les scores par ordre décroissant pour obtenir les émotions les plus probables
    emotion = sorted(emotion_scores.items(), key=lambda x: x[1], reverse=True)


    # Find all the faces in the current frame of video
    face_locations = face_recognition.face_locations(rgb_frame, model='hog', number_of_times_to_upsample=1)
    face_encodings = face_recognition.face_encodings(rgb_frame, face_locations)
    

    face_names = []
    face_gender=[]
    face_age=[]
    face_emotions =[]

    
    face_emotions.append(emotion)

    # Loop through each face encoding in the current frame of video
    for face_encoding in face_encodings:
        # See if the face is a match for any known faces
        matches = face_recognition.compare_faces(known_face_encodings, face_encoding)
        name = "Unknown"
        emotion = "Unknown" 
        gender = "Non-binary"
        age = "Older"

        # If a match was found in known_face_encodings, just use the first one
        face_distances = face_recognition.face_distance(known_face_encodings, face_encoding)
        best_match_index = np.argmin(face_distances)
        if matches[best_match_index]:
            name = known_face_names[best_match_index]

        #emotion 
        #??

        # Predict gender and age for the detected face
        (top, right, bottom, left) = face_locations[0]
        face_img = frame[top:bottom, left:right]
        blob = cv.dnn.blobFromImage(face_img, 1.0, (227, 227),
                                     MODEL_MEAN_VALUES,
                                     swapRB=False)
        # Predict Age
        age_net.setInput(blob)
        age_preds = age_net.forward()
        i = age_preds[0].argmax()
        age = AGE_INTERVALS[i]
        
        # Predict Gender
        gender_net.setInput(blob)
        gender_preds = gender_net.forward()
        gender = genderList[gender_preds[0].argmax()]

        face_names.append(name)
        face_gender.append(gender)
        face_age.append(age)

    # Draw a box around each face and label with name, gender and age
    for (top, right, bottom, left), name, gender, age in zip(face_locations, face_names, face_gender, face_age):
        # Draw a box around the face
        cv.rectangle(frame, (left, top), (right, bottom), (0, 0, 255), 2)
        # Draw a label with the name, gender and age below the face
        label = f"{name}, {gender}, {age}"
        cv.rectangle(frame, (left, bottom - 35), (right, bottom), (0, 0, 255), cv.FILLED)
        cv.putText(frame, label, (left + 6, bottom - 6), cv.FONT_HERSHEY_DUPLEX, 1.0, (255, 255, 255), 1)

    return frame


if st.button('Open Camera'):
    st.write('Camera is open')
    # Open camera with OpenCV and keep in video stream:
    video_stream = cv.VideoCapture(0)
    video_placeholder = st.empty()
    stop_button = st.button('Stop Camera')
    while not stop_button:
        ret, frame = video_stream.read()
        if ret:
            # Detect faces in the current frame of video
            detect_faces(frame, known_face_encodings, known_face_names)
            # Display the resulting image
            video_placeholder.image(frame, channels="BGR")
        if cv.waitKey(1) & 0xFF == ord('q'):
            break
    
    video_stream.release()
    cv.destroyAllWindows()
    st.write('Camera is stopped')
